Spring Security Architecture

Dev Steps 
1. Add spring sec starter deps in pom.xml
Effect -> all end points - protected (secured) - in accessible

2. Defaults spring sec offers
- protects all endpoints
- supplies login n logout page , to support form login
- supports basic authentication for REST clients
- suplies def user
 - name : user
 - password - randomly generated by spring sec.
3. Add spring sec user name n password in app properties file , to replace auto generated details.
 -user details are stored in mem.

4. Test end points using 
 - browser - form login
 - postman - basic auth.

5. Authentication was done BUT no authorization!
6. To override defaults -
  - create spring config class
  - Annotations 
   - @Configuration
   - @EnableWebSecurity
   - @EnableMethodSecurity
7. Add a Bean (@Bean annotated method) 
 - to supply user details
  - using ready made imple class of UserDetailsService i/f
   - InMemoryUserDetailsManger - class 
    - added user details (name , pwd, Collection<GrantedAuthority> roles)
    - UserDetails - i/f - implemented by User class - spring sec class

8. Add a Bean (@Bean annotated method) 
 - to supply authorization , form login , CSRF , basic auth , session , filter related rules.
 - To return : SecurityFilterChain
 - Depcy (method arg) - HttpSecurity
 - disable CSRF protection (since RESTful web service - stateless)
 - authorized HTTP reqs 
  - permit all
   - swagger ("/v*/api-docs/**","/swagger-ui/**")
   - user siginin , user signup
   - public end points (eg - view products , check available flights...)
  - only authentication (eg - add product to cart)
  - authentication + authorization (eg - add product)
  - disable form login
  - enable basic auth (to be replaced by JWT - more secure)
  - HTTP session  management - disable HTTP session



Flow 
REST clnt sends a request to REST server 
-> Intercepted by Spring sec filter chain (delegated by a class - DelegatingFilterProxy) 
-> current filter - BasicAuthenticationFilter
 - Base 64  decoding of username:password
(Basic base64 enc username:password) - req header - "Authorization"
 -> BasicAuthenticationFilter delegates the auth to AuthenticationManager (i/f) <--- imple by ProviderManager
 -> i.e Filter invokes - public Authentication authenticate(Authentication auth) throws AuthenticationException
 -> Authentication i/f 
  - UserNamePasswordAuthenticationToken(username , passwrd)
  - isAuthenticated : false (=> auth is yet to be done!)

-> AuthMgr iterates through the list of available AuthProviders
 - AuthMgr invokes supports() method
  - rets false - continues 
  - rets true 
   - AuthMgr calls - authenticate(Authentication obj) method of  selected Auth Provider

-> AuthenticationProvider -i/f 
 - imple by DaoAuthenticationProvider (default provider)

-> Dependencies of AuthenticationProvider
   - PasswordEncoder (i/f) <--- BCryptPasswordEncoder 
    - configure it as a spring bean (@Bean)
    - in spring app class
    - used by DaoAuthenticationProvider 
     - to encrypt (SHA-256 | 512) incoming password
    - UserDetailsService i/f 
     - to get user details from either In mem | DB
     - Func i/f
     - SAM 
      -public UserDetails loadUserByUserName(String    	userName|email) throws UserNameNotFoundException
     
     - UserDetails - i/f 
      - represents user details from DB or mem.
      - getUserName, getPassword, getAuthorities

     -> DaoAuthProvider calls 
       loadUserByUserName(username) of UserDetailsService
       -> in case of success (=> username found)
           - rets UserDetails loaded from mem | db 
           - DaoAuthProvider verifies - pwd
            - in case of a match - auth done ! 
   -> DaoAuthProvider rets UserDetails to -> Auth Mgr
     -> It stores verified UserDetails in the Authentication object
        - isAuthenticated - true
    -> AuthMgr rets this Authentication to BasicAuthFilter 
      - Authentication has - username , pwd : null ,Collection<GrantedAuthorty> 

    -> BasicAuthFilter stores Authentication obj under Spring security Context
   -> Next imp filter AuthorizationFilter
     -> Extracts Granted Authorities from Spring security Context
           n does role based authorization. 

    ->in case of complete success ->delegates the request to D.S 
 
   -> In case of Authentication failure (AuthenticationException)
 -> aborts the req processing -> sends SC 401 to the clnt
   ->  In case of Authorization failure (AuthorizationException)
 -> aborts the req processing -> sends SC 403 to the clnt


 
Next Dev steps
 Replace In mem auth by DB based auth.
 BUT will still use BasicAuth

1. Remove UserDetailsService bean form spring config file
2. Create custom imple class for - UserDetailsService
3. imple the method - loadUserByUserName
4. UserEntity implements - UserDetails
5. UserDao 
 - finder method - findByEmail
6. Test it !
 - test user signup (with enc pwd)
 - user sign in 
  - use postman client (Basic auth - username:pwd)

eg - {
  "firstName": "Rama",
  "lastName": "Kher",
  "email": "rama@gmail.com",
  "password": "abc#1234",
  "dob": "1990-05-14",
  "role": "ROLE_ADMIN"
}

{
  "firstName": "Mihir",
  "lastName": "Sen",
  "email": "mihir@gmail.com",
  "password": "xyz$1234",
  "dob": "1992-05-14",
  "role": "ROLE_CUSTOMER"
}


